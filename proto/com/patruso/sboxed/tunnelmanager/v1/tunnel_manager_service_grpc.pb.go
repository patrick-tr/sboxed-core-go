// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/com/patruso/sboxed/tunnelmanager/v1/tunnel_manager_service.proto

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package sboxed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelManagerService_ListPeers_FullMethodName  = "/com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService/ListPeers"
	TunnelManagerService_CreatePeer_FullMethodName = "/com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService/CreatePeer"
	TunnelManagerService_RemovePeer_FullMethodName = "/com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService/RemovePeer"
	TunnelManagerService_StartPeer_FullMethodName  = "/com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService/StartPeer"
	TunnelManagerService_StopPeer_FullMethodName   = "/com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService/StopPeer"
)

// TunnelManagerServiceClient is the client API for TunnelManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelManagerServiceClient interface {
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	CreatePeer(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*CreatePeerResponse, error)
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error)
	StartPeer(ctx context.Context, in *StartPeerRequest, opts ...grpc.CallOption) (*StartPeerResponse, error)
	StopPeer(ctx context.Context, in *StopPeerRequest, opts ...grpc.CallOption) (*StopPeerResponse, error)
}

type tunnelManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelManagerServiceClient(cc grpc.ClientConnInterface) TunnelManagerServiceClient {
	return &tunnelManagerServiceClient{cc}
}

func (c *tunnelManagerServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, TunnelManagerService_ListPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelManagerServiceClient) CreatePeer(ctx context.Context, in *CreatePeerRequest, opts ...grpc.CallOption) (*CreatePeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePeerResponse)
	err := c.cc.Invoke(ctx, TunnelManagerService_CreatePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelManagerServiceClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePeerResponse)
	err := c.cc.Invoke(ctx, TunnelManagerService_RemovePeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelManagerServiceClient) StartPeer(ctx context.Context, in *StartPeerRequest, opts ...grpc.CallOption) (*StartPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartPeerResponse)
	err := c.cc.Invoke(ctx, TunnelManagerService_StartPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelManagerServiceClient) StopPeer(ctx context.Context, in *StopPeerRequest, opts ...grpc.CallOption) (*StopPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopPeerResponse)
	err := c.cc.Invoke(ctx, TunnelManagerService_StopPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelManagerServiceServer is the server API for TunnelManagerService service.
// All implementations must embed UnimplementedTunnelManagerServiceServer
// for forward compatibility.
type TunnelManagerServiceServer interface {
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	CreatePeer(context.Context, *CreatePeerRequest) (*CreatePeerResponse, error)
	RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error)
	StartPeer(context.Context, *StartPeerRequest) (*StartPeerResponse, error)
	StopPeer(context.Context, *StopPeerRequest) (*StopPeerResponse, error)
	mustEmbedUnimplementedTunnelManagerServiceServer()
}

// UnimplementedTunnelManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelManagerServiceServer struct{}

func (UnimplementedTunnelManagerServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedTunnelManagerServiceServer) CreatePeer(context.Context, *CreatePeerRequest) (*CreatePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePeer not implemented")
}
func (UnimplementedTunnelManagerServiceServer) RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedTunnelManagerServiceServer) StartPeer(context.Context, *StartPeerRequest) (*StartPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPeer not implemented")
}
func (UnimplementedTunnelManagerServiceServer) StopPeer(context.Context, *StopPeerRequest) (*StopPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPeer not implemented")
}
func (UnimplementedTunnelManagerServiceServer) mustEmbedUnimplementedTunnelManagerServiceServer() {}
func (UnimplementedTunnelManagerServiceServer) testEmbeddedByValue()                              {}

// UnsafeTunnelManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelManagerServiceServer will
// result in compilation errors.
type UnsafeTunnelManagerServiceServer interface {
	mustEmbedUnimplementedTunnelManagerServiceServer()
}

func RegisterTunnelManagerServiceServer(s grpc.ServiceRegistrar, srv TunnelManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedTunnelManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelManagerService_ServiceDesc, srv)
}

func _TunnelManagerService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelManagerService_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelManagerService_CreatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServiceServer).CreatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelManagerService_CreatePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServiceServer).CreatePeer(ctx, req.(*CreatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelManagerService_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelManagerService_RemovePeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServiceServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelManagerService_StartPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServiceServer).StartPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelManagerService_StartPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServiceServer).StartPeer(ctx, req.(*StartPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelManagerService_StopPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServiceServer).StopPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TunnelManagerService_StopPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServiceServer).StopPeer(ctx, req.(*StopPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelManagerService_ServiceDesc is the grpc.ServiceDesc for TunnelManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.patruso.sboxed.tunnelmanager.v1.TunnelManagerService",
	HandlerType: (*TunnelManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPeers",
			Handler:    _TunnelManagerService_ListPeers_Handler,
		},
		{
			MethodName: "CreatePeer",
			Handler:    _TunnelManagerService_CreatePeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _TunnelManagerService_RemovePeer_Handler,
		},
		{
			MethodName: "StartPeer",
			Handler:    _TunnelManagerService_StartPeer_Handler,
		},
		{
			MethodName: "StopPeer",
			Handler:    _TunnelManagerService_StopPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/com/patruso/sboxed/tunnelmanager/v1/tunnel_manager_service.proto",
}
